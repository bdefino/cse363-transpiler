CSE363: Offensive Security, Spring 2020

Term Project Descriptions
------------------------------------------------------------------------------

Deadlines:

1) Project teams and initial specs: 2/21/2020 11:59pm EDT
2) Detailed specs and design doc: 3/27/2020 11:59pm EDT
3) Final tool and documentation: 5/1/2020 11:59pm EDT
4) Presentations and demos: 5/4/2020 and 5/6/2020

Submission of (1) and (2) through email to:
mikepo+CSE363proj@cs.stonybrook.edu
Submission of (3) through: https://blackboard.stonybrook.edu


Grading criteria:
- Supported functionality and features
- Quality of the implementation
- Thoroughness of the documentation
- Novelty of the developed capabilities
- Presentation and demo

You can either pick one of the following projects, or suggest a different one.
In the latter case, you should provide a similar description as the ones
below at least one week before the initial specs deadline. Teams can comprise
up to 3 persons.

For the initial sepcs, there is no specific structure. Just focus on
high-level design decisions, such as platform, OS, architecture, and any
specific features/functionality that you know already you are going to aim
for. Basically, a more specific version of the project descriptions below,
tailored to your choices.



Project 1: ROP chain compiler
------------------------------------------------------------------------------

In this project you will develop an automated return-oriented programming
(ROP) [1, 3] payload generator. It will take as input one (or more) binaries,
scan their executable sections for useful gadgets, and then assemble the right
ones into a functional ROP payload for giving execute permission to a
second-stage shellcode.

- Requirements

Input: one (or more) PE or ELF binaries

Output: the raw ROP payload to be executed

Payload tester: an additional simple tool that will create a dummy process,
load the executable(s) that contain the gadgets, load the ROP payload and a
fixed second-stage shellcode, and execute it.


- Additional information

Your implementation should support at least one architecture and OS (e.g., x86
Linux, x64 Linux, x86 Windows, x64 Windows). Support for multiple operating
systems or architectures is welcome.

Advanced ROP "compilers" [2, 4, 5] allow the user to express the desired
functionality of the ROP payload (i.e., the computation it must perform),
usually by writing a specification in some high-level language. The ROP
compiler then assembles the proper gadgets to implement that functionality.
You are NOT required to implement such a capability. Focusing on a fixed ROP
functionality (give execute permission to a second-stage shellcode) is enough.
You are welcome though to implement additional types of "target" payloads.

There are several ways to achieve the above goal. For example, you can either
change the permissions of the memory in which the shellcode already resides,
or allocate a new memory area with the desired permissions and copy the
shellcode there. You are free to choose any strategy you prefer.

- Bonus points

Support for gadgets that end with indirect branch instructions other than RET
(i.e., JMP, CALL)

Support for pivoting to ROP payloads residing outside the stack (i.e., on the
heap)

Support for "stealthy" payloads that use longer-than-usual gadgets



Project 2: Polymorphic Shellcode Generator
------------------------------------------------------------------------------

In this project you will develop a polymorphic shellcode generation engine
that will convert an existing shellcode written for a given platform into an
equivalent shellcode that achieves the same thing but looks completely
different at the byte level.

- Requirements

Input: raw 32-bit shellcode

Output: equivalent raw 32-bit shellcode that has been mutated

The generated shellcode should not contain any zero-value bytes

As part of the documentation, an analysis of the entropy of the generated
mutations. This should include: 1) a graph with the byte frequency
distribution of 1024 instances (mutations) of a given shellcode; 2) a
depiction of 512 instances (mutations) of a given shellcode as a grayscale
bitmap image (width = 1024 pixels, height = 512 pixels) in which each row
corresponds to each of the 512 instances, and each column corresponds to the
byte values of the first 1024 bytes of each shellcode (to get an idea, see
Figure 2 in Song et al.'s paper [6]).

- Additional information

Your implementation should be able to handle 32-bit x86 code. Support for
multiple architectures (e.g., ARM) is welcome.

The goal of your implementation should be the generation of shellcode that is
highly different than the original. This can be achieved in several ways. For
example, one approach (typically referred to as "polymorphism" or "packing"
[6-10]) is to encrypt/pack/encode the shellcode using a random key/seed, and
prepend to the encrypted shellcode a small decryption routine that at runtime
will first decrypt the shellcode and then transfer control to it. Another
approach (typically referred to as "metamorphism" or "code obfuscation" [10,
11]) is to avoid self-decryption altogether, and just re-construct the exact
same functionality using a different set of instructions.

Your goal should be to generate mutations that are as different as possible,
and avoid having bytes at certain positions that remain the same across all
instances (if such bytes exist, then it will be easy to construct a signature
for an antivirus or intrusion detection system to detect all instances).

- Bonus points

Avoidance of "bad" bytes: generate shellcode that does not contain certain
byte values specified by the user

Generation of as compact as possible shellcode



Project 3: Covert C&C and Exfiltration
------------------------------------------------------------------------------

In this project you will develop a client and a server for covert command and
control of, and data exfiltration from, an infected client [12]. You do not
have to implement any actual malicious capability, but just the communication
part. Any generated traffic should not stand out and should ideally look as
some innocuous communication.

- Requirements

You should implement the following capabilities:

1) the transmission of commands to the victim (and the receipt of
corresponding responses)

2) the asynchronous or periodic transmission of notifications from the victim
to the attacker-controlled server

3) the transmission of (potentially) large files from/to the victim and the
attacker-controlled server


- Additional information

Your implementation should support at least one popular OS (i.e., Linux or
Windows). Support for multiple OSes or even architectures (e.g., ARM) is
welcome. The server can either run on the same or a different platform, or you
can even use some cloud provider or service. Your server should support
communication with multiple (e.g., hundreds of) clients.

The goal of your implementation will be to prevent the easy detection of the
C&C/exfiltrated traffic. You can follow any strategy you want, such as
pretending that the traffic belongs to some other application (e.g., some
video game or some chat application). Another approach is to hide the
communication as part of existing (or fake) communication towards online
services (e.g., Twitter, Facebook, blogs). In any case, the traffic should not
stand out or look suspicious.

- Bonus points

Rely on a popular online/cloud service to hide the server, or implement a
completely "serverless" architecture.

Use steganography [13] to hide commands or exfiltrated data.

Adaptive traffic rate limiting according to the legitimate traffic patterns
and activity of the victim host.



References
------------------------------------------------------------------------------

[1] https://hovav.net/ucsd/dist/geometry.pdf
[2] https://edmcman.github.io/papers/usenix11.pdf
[3] http://shell-storm.org/talks/ROP_course_lecture_jonathan_salwan_2014.pdf
[4] http://shell-storm.org/project/ROPgadget/
[5] https://github.com/pakt/ropc
[6] https://angelosk.github.io/Papers/2007/polymorph.pdf
[7] http://phrack.org/issues/61/9.html
[8] https://github.com/K2/ADMMutate
[9] https://www.piotrbania.com/all/tapion/
[10] https://github.com/cryptolok/MorphAES
[11] http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.133.1502
[12] https://azeria-labs.com/command-and-control/
[13] https://www.blackhat.com/docs/eu-15/materials/eu-15-Bureau-Hiding-In-Plain-Sight-Advances-In-Malware-Covert-Communication-Channels.pdf

Some frameworks you may find useful:

http://www.capstone-engine.org/
http://www.keystone-engine.org/
http://www.unicorn-engine.org/
https://github.com/gdabah/distorm
http://www.radare.org/
